<?php


namespace app\admin\controller;


use think\Db;
use think\Exception;

class Team extends  Base
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index(){
        return $this->fetch();
    }
    public function addindex(){
        return $this->fetch();
    }
//    添加数据
    public function add(){
        if(!$this->request->isPost()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求格式错误'
            ]);
        }
        $data=$this->request->post();
        $validate=validate('Team');
        if($validate->check($data)){
            return json([
                'code'=>config('code.fali'),
                'msg'=>$validate->getError()
            ]);
        }
        $model=model('Team');
        $result=$model->add($data);
        try{
            if($result){
                return json([
                    'code'=>config('code.success'),
                    'msg'=>'添加成功'
                ]);
            }else{
                return json([
                    'code'=>config('code.fali'),
                    'msg'=>'添加失败'
                ]);
            }
        }catch(Exception $exception){
                return json([
                    'code'=>config('code.fali'),
                    'msg'=>'添加失败'
                ]);
        }

    }
//    拿到数据进行页面渲染
    public function find(){
        if(!$this->request->isGet()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求方式错误',
            ]);
        }
        //        请求从前台发送回来的所有数据
        $parme=$this->request->get();
//        判断如果没有收到页数或者为空，那就给一个默认值
        if(!isset($parme['page'])||empty($parme['page'])){
            $page=1;
        }else{
            $page=$parme['page'];
        }
//        判断如果没有收到每页显示的条数，那就给一个默认值
        if(!isset($parme['limit'])||empty($parme['limit'])){
            $limit=config('paginte.list_rows');
        }else{
            $limit=$parme['limit'];
        }
//        创建一个空的数组，用来判断接收回来多余的数据
        $sdata=[];
//        判断如果名称存在并且不为空就根据这个数组设置搜索的条件
        if(isset($parme['navname'])&&!empty($parme['navname'])){
//            由于名称不能设置完全的相等，而like是一个模糊查询，大概有相同的名称就可以查询到
            $sdata['navname']=['like','%'.$parme['navname'].'%'];
        }
        // 判断如果排序存在并且不为空就根据这个数组设置搜索的条件
        if(isset($parme['sort'])&&!empty($parme['sort'])){
            $sdata['sort']=$parme['sort'];
        }
        // 判断如果模板存在并且不为空就根据这个数组设置搜索的条件
        if(isset($parme['url'])&&!empty($parme['url'])){
            $sdata['url']=$parme['url'];
        }
        $model=model('Team');
        $result=$model->finds($sdata,$page,$limit);
        $count=$model->counts($sdata);
        try{
            if($result){
                return json([
                    'code'=>0,
                    'msg'=>'',
                    'data'=>$result,
                    'count'=>$count
                ]);
            }else{
                return json([
                    'code'=>2,
                    'msg'=>'数据请求失败'
                ]);
            }
        }catch (Exception $exception){
                return json([
                    'code'=>2,
                    'msg'=>'数据请求失败'
                ]);
        }
    }
//    删除
    public function del(){
        if(!$this->request->isPost()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求格式错误'
            ]);
        }
        $data=$this->request->post();
        $id=$data['id'];
        $validate=validate('Team');
        if($validate->scene('del')->check($id)){
            return json([
                'code'=>config('code.fali'),
                'msg'=>$validate->getError()
            ]);
        };
        $model=model('Team');
        $data=$model->dels(['id'=>$id]);
        try{
            if($data){
                return json([
                    'code'=>config('code.success'),
                    'msg'=>'删除成功'
                ]);
            }else{
                return json([
                    'code'=>config('code.fali'),
                    'msg'=>'删除失败'
                ]);
            }
        }catch(Exception $exception){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'删除失败'
            ]);
        }
    }
//    修改拿到数据渲染
    public function edit(){
        if(!$this->request->isGet()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求格式错误'
            ]);
        }
        $data=$this->request->get();
        $validate=validate('Team');
        if(!$validate->scene('edit')->check($data)){
            return json([
                'code'=>config('code.fali'),
                'msg'=>$validate->getError()
            ]);
        }
        $model=model('Team');
        $result=$model->edits($data);
        try{
            if($result){
                return json([
                    'code'=>config('code.success'),
                    'msg'=>"数据获取成功",
                    'data'=>$result
                ]);
            }else{
                return json([
                    'code'=>config('code.fali'),
                    'msg'=>"数据获取失败",
                ]);
            }

        }catch (Exception $exception){
            return json([
                'code'=>config('code.fali'),
                'msg'=>"数据获取失败",
            ]);
        }
    }
//    修改
    public function update(){
        if(!$this->request->isPost()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求格式错误'
            ]);
        }
        $data=$this->request->post();
        $id=$data['id'];
        $name=$data['teamname'];
        $position=$data['positions'];
        $img=$data['img'];
//        $validate=validate('Team');
//        if($validate->check($data)){
//            return json([
//                'code'=>config('code.fali'),
//                'msg'=>$validate->getError(),
//            ]);
//        }
//        $model=model('Team');
//        $result=$model->updates($id,$name,$position,$img);
        $result=Db::table('team')->where('id',$id)->update(['teamname'=>$name,'img'=>$img,'positions'=>$position]);
        try{
            if($result){
                return json([
                   'code'=>config('code.success'),
                   'msg'=>'修改成功'
                ]);
            }else{
                return json([
                    'code'=>config('code.fali'),
                    'msg'=>'修改失败'
                ]);
            }
        }catch(Exception $exception){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'修改失败'
            ]);
        }
    }
}