<?php


namespace app\admin\controller;


use think\Db;
use think\Exception;

class Product extends Base
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }
    public function index(){
        $productmodel=model('Productmodel');
        $productdata=$productmodel->querys();
        $this->assign('product',$productdata);
        return $this->fetch();
    }
    public function addindex(){
        $productmodel=model('Productmodel');
        $productdata=$productmodel->querys();
        $this->assign('product',$productdata);
        return $this->fetch();
    }
//    添加数据
    public function finds(){
        if (!$this->request->isPost()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'数据请求失败'
            ]);
        }
        $data=$this->request->post();
        if(!isset($data['uppershelf'])||empty($data['uppershelf'])){
            $data['uppershelf']=0;
        }
        $validate=validate('Product');
        if($validate->check($data)){
            return json([
                'code'=>config('code.fali'),
                'msg'=>$validate->getError()
            ]);
        }
        try{
            $model=model('Products');
            $reslut=$model->inserts($data);
            if($reslut){
                return json([
                    'code'=>config('code.success'),
                    'msg'=>'插入成功'
                ]);
            }else{
                return json([
                    'code'=>config('code.fali'),
                    'msg'=>'插入失败'
                ]);
            }
        }catch(Exception $exception){
                return json([
                    'code'=>config('code.fali'),
                    'msg'=>'插入失败'
                ]);
        }
    }
//    页面渲染
    public function query(){
        if(!$this->request->isGet()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'数据请求失败'
            ]);
        }
        //        请求从前台发送回来的所有数据
        $parme=$this->request->get();
//        判断如果没有收到页数或者为空，那就给一个默认值
        if(!isset($parme['page'])||empty($parme['page'])){
            $page=1;
        }else{
            $page=$parme['page'];
        }
//        判断如果没有收到每页显示的条数，那就给一个默认值
        if(!isset($parme['limit'])||empty($parme['limit'])){
            $limit=config('paginte.list_rows');
        }else{
            $limit=$parme['limit'];
        }
//        创建一个空的数组，用来判断接收回来多余的数据
        $sdata=[];
//        判断如果名称存在并且不为空就根据这个数组设置搜索的条件
        if(isset($parme['typeid'])&&!empty($parme['typeid'])){
//            由于名称不能设置完全的相等，而like是一个模糊查询，大概有相同的名称就可以查询到
            $sdata['typeid']=['like','%'.$parme['typeid'].'%'];
        }
        // 判断如果排序存在并且不为空就根据这个数组设置搜索的条件
        if(isset($parme['goodsname'])&&!empty($parme['goodsname'])){
            $sdata['goodsname']=['like','%'.$parme['goodsname'].'%'];
        }
        // 判断如果模板存在并且不为空就根据这个数组设置搜索的条件
        if(isset($parme['stock'])&&!empty($parme['stock'])){
            $sdata['stock']=$parme['stock'];
        }
//        数据库的总长度
        $data=Db::table('goods')->alias('a')->join('types b','a.typeid = b.id')
            ->where($sdata)->order('ids','desc')->paginate($limit,false,[
                'page'=>$page]);
        $count=$data->total();
        $datas=$data->items();

        try{
            if($datas&&$count){
                return json([
                    'code'=>0,
                    'msg'=>"",
                    'count'=>$count,
                    'data'=>$datas
                ]);
            }else{
                return json([
                    'code'=>1,
                    'msg'=>"请求失败",
                ]);
            }
        }catch (Exception $exception){
            return json([
                'code'=>1,
                'msg'=>"请求失败",
            ]);
        }
    }
//    删除
    public function del(){
        if(!$this->request->isPost()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求格式错误'
            ]);
        }

        $data=$this->request->post();
        $id=$data['ids'];
        $validate=validate('Product');
        if($validate->scene('del')->check($id)){
            return json([
                'code'=>config('code.fali'),
                'msg'=>$validate->getError()
            ]);
        };
        $model=model('Products');
        $data=$model->dels(['ids'=>$id]);
        try{
            if($data){
                return json([
                    'code'=>config('code.success'),
                    'msg'=>'删除成功'
                ]);
            }else{
                return json([
                    'code'=>config('code.fali'),
                    'msg'=>'删除失败'
                ]);
            }
        }catch(Exception $exception){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'删除失败'
            ]);
        }

    }
//    修改拿到数据渲染页面
    public function edits(){
        $productmodel=model('Productmodel');
        $productdata=$productmodel->querys();
        $this->assign('product',$productdata);

        $data=$this->request->get();
        $model=model('Products');
        $result=$model->edits($data);
        $result['banner']=explode(',',$result['img2']);
        $this->assign('edit',$result);
        return  $this->fetch();
    }
    public function update(){
        if(!$this->request->isPost()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求方式错误'
            ]);
        }
        $data=$this->request->post();
        $typeid=$data['typeid'];
        $img1=$data['img1'];
        $img2=$data['img2'];
        $name=$data['goodsname'];
        $id=$data['ids'];
        $stock=$data['stock'];
        $uppershelf=$data['uppershelf'];
        $market_price=$data['market_price'];
        $price=$data['price'];
        $content=$data['content'];
//        $model=model('Product');
//        $result=$model->updates($data);
        $result=Db::table('goods')->where('ids',$id)
            ->update(['typeid'=>$typeid,'img1'=>$img1,'img2'=>$img2,'goodsname'=>$name,'stock'=>$stock,'uppershelf'=>$uppershelf,'market_price'=>$market_price,'price'=>$price,'content'=>$content ]);

        try{
            if($result){
                return json([
                    'code'=>config('code.success'),
                    'msg'=>'修改成功'
                ]);
            }else{
                return json([
                    'code'=>config('code.fali'),
                    'msg'=>'修改失败'
                ]);
            }
        }catch (Exception $exception){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'修改失败'
            ]);
        }

     }

}