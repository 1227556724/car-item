<?php


namespace app\admin\controller;


use think\Db;
use think\Exception;

class slider extends Base
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }
    public function index(){
        return $this->fetch();
    }
    public function addindex(){
        return $this->fetch();
    }
    public function add(){
        $data=$this->request->post();
        $model=model('Slider');
        $result=$model->inserts($data);

        try{
            if($result){
               return json([
                   'code'=>config('code.success'),
                   'msg'=>'插入成功'
               ]);
            }
        }catch(Exception $exception){

            return json([
                'code'=>config('code.fali'),
                'msg'=>'插入失败'
            ]);
        }
    }
    public function find(){
        if(!$this->request->isGet()){
            return json([
                'code'=>config('code.fali')
            ]);
        }
//        请求从前台发送回来的所有数据
        $parme=$this->request->get();
//        判断如果没有收到页数或者为空，那就给一个默认值
        if(!isset($parme['page'])||empty($parme['page'])){
            $page=1;
        }else{
            $page=$parme['page'];
        }
//        判断如果没有收到每页显示的条数，那就给一个默认值
        if(!isset($parme['limit'])||empty($parme['limit'])){
            $limit=config('paginte.list_rows');
        }else{
            $limit=$parme['limit'];
        }
//        创建一个空的数组，用来判断接收回来多余的数据
        $sdata=[];
        // 判断如果排序存在并且不为空就根据这个数组设置搜索的条件
        if(isset($parme['sort'])&&!empty($parme['sort'])){
            $sdata['sort']=$parme['sort'];
        }
        if(isset($parme['id'])&&!empty($parme['id'])){
            $sdata['id']=$parme['id'];
        }
//        数据库的总长度

        $model=model('Slider');
        $data=$model->finds($sdata,$page,$limit);
        $count=$model->counts($sdata);
        if($data){
            return json([
                'code'=>0,
                'msg'=>"",
                'count'=>$count,
                'data'=>$data
            ]);
        }else{
            return json([
                'code'=>1,
                'msg'=>"请求失败",
                'data'=>$data
            ]);
        }
    }
    public function del(){
        if(!$this->request->isGet()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求格式错误'
            ]);
        }
        $data=$this->request->get();
        $id=$data['id'];
        $validate=validate('Slider');
        if(!$validate->scene('del')->check($id)){
            return json([
                'code'=>config('code.fali'),
                'msg'=>$validate->getError()
            ]);
        };
        $model=model('Slider');
        $data=$model->deletes(['id'=>$id]);
        try{
            if($data){
                return json([
                    'code'=>config('code.success'),
                    'msg'=>'删除成功'
                ]);
            }
        }catch(Exception $exception){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'删除失败'
            ]);
        }
    }
    public function edit(){
        if(!$this->request->isGet()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求格式错误'
            ]);
        }
        $data=$this->request->get();
        $validate=validate('Slider');
        if(!$validate->scene('sort1')->check($data)){
            return json([
                'code'=>config('code.fali'),
                'msg'=>$validate->getError()
            ]);
        }
        $model=model('Slider');
        $result=$model->edits($data);
        try{
            if($result){
                return json([
                    'code'=>config('code.success'),
                    'msg'=>"数据获取成功",
                    'data'=>$result
                ]);
            }else{
                return json([
                    'code'=>config('code.fali'),
                    'msg'=>"数据获取失败",
                ]);
            }

        }catch (Exception $exception){
            return json([
                'code'=>config('code.fali'),
                'msg'=>"数据获取失败",
            ]);
        }
    }
    public function update(){
        if(!$this->request->isPost()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求方式错误'
            ]);
        }
        $data=$this->request->post();
        $id=$this->request->post('id');
        $img=$this->request->post('img');
        $sort=$this->request->post('sort');
//        $model=model('Slider');
//        $result=$model->updates(['id'=>$id],['img'=>$img],['sort'=>$sort]);
        $result=Db::table('slider')->where('id',$id)->update(['id'=>$id,'img'=>$img,'sort'=>$sort]);
        try{
            if($result){
                return  json([
                    'code'=>config('code.success'),
                    'msg'=>'修改成功'
                ]);
            }else{
                return  json([
                    'code'=>config('code.fali'),
                    'msg'=>'修改失败'
                ]);
            }
        }catch(Exception $exception){
                return  json([
                    'code'=>config('code.fali'),
                    'msg'=>'修改失败'
                ]);

        }
    }
    public function sort(){
        if (!$this->request->isPost()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>"请求方式错误"
            ]);
        }
        $id=$this->request->post('id');
        $sort=$this->request->post('sort');
        $model=model('Slider');
        $result=$model->sorts(['id'=>$id],['sort'=>$sort]);
        try {
            if($result){
                return json([
                    'code'=>config('code.success'),
                    'msg'=>"修改成功"
                ]);
            }else{
                return json([
                    'code'=>config('code.fali'),
                    'msg'=>"修改失败"
                ]);
            }
        }catch (Exception $exception){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'修改失败'
            ]);
        };
    }
}