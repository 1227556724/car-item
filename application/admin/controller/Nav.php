<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/7/25
 * Time: 11:00
 */

namespace app\admin\controller;


use think\Db;
use think\Exception;

class Nav extends Base
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }
    public function index(){
     $data=Db::name('nav')->select();
//        var_dump($data);
     return view('index',['navs'=>$data]);
 }
    public function addindex(){
        return $this->fetch();
    }
    public function add(){
        if(!$this->request->isPost()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>"请求方式错误"
            ]);
        }
        $data=$this->request->post();
        $validate=validate('Nav');
        $results = $validate->scene('add')->check($data);
        if(!$results){
            return json([
                'code'=>config('code.fali'),
                'msg'=>$validate->getError()
            ]);
        }
        $result=Db::name('nav')->insert($data);
        try {
            if($result){
                return json([
                    'code'=>config('code.success'),
                    'msg'=>"数据插入成功"
                ]);
            }else{
                return json([
                    'code'=>config('code.fali'),
                    'msg'=>"数据插入失败"
                ]);
            }
        }catch (Exception $exception){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'数据插入失败'
            ]);
        };
    }
    public function find(){
        if(!$this->request->isGet()){
            return json([
                'code'=>config('code.fali')
            ]);
        }
//        请求从前台发送回来的所有数据
        $parme=$this->request->get();
//        判断如果没有收到页数或者为空，那就给一个默认值
        if(!isset($parme['page'])||empty($parme['page'])){
            $page=1;
        }else{
            $page=$parme['page'];
        }
//        判断如果没有收到每页显示的条数，那就给一个默认值
        if(!isset($parme['limit'])||empty($parme['limit'])){
            $limit=config('paginte.list_rows');
        }else{
            $limit=$parme['limit'];
        }
//        创建一个空的数组，用来判断接收回来多余的数据
        $sdata=[];
//        判断如果名称存在并且不为空就根据这个数组设置搜索的条件
        if(isset($parme['navname'])&&!empty($parme['navname'])){
//            由于名称不能设置完全的相等，而like是一个模糊查询，大概有相同的名称就可以查询到
            $sdata['navname']=['like','%'.$parme['navname'].'%'];
        }
        // 判断如果排序存在并且不为空就根据这个数组设置搜索的条件
        if(isset($parme['sort'])&&!empty($parme['sort'])){
            $sdata['sort']=$parme['sort'];
        }
        // 判断如果模板存在并且不为空就根据这个数组设置搜索的条件
        if(isset($parme['url'])&&!empty($parme['url'])){
            $sdata['url']=$parme['url'];
        }
//        数据库的总长度
        $count=Db::table('nav')->where($sdata)->count();
        $result=Db::table('nav')->where($sdata)->order('sort','desc')->page($page,$limit)->select();
        if($result){
            return json([
                'code'=>0,
                'msg'=>"",
                'count'=>$count,
                'data'=>$result
            ]);
        }else{
            return json([
                'code'=>1,
                'msg'=>"请求失败",
                'data'=>$result
            ]);
        }
    }
    public function del(){
        if(!$this->request->isGet()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求格式错误'
            ]);
        }
        $id=$this->request->get();
        $validate=validate('Nav');
        if(!$validate->scene('del')->check($id)){
            return json([
                'code'=>config('code.fali'),
                'msg'=>$validate->getError()
            ]);
        };
        $data=Db::table('nav')->where($id)->delete();
        if($data){
            return json([
                'code'=>config('code.success'),
                'msg'=>'删除成功'
            ]);
        }else{
            return json([
                'code'=>config('code.fali'),
                'msg'=>'删除失败'
            ]);
        }
    }
    public function edit(){
        if(!$this->request->isGet()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求方式错误'
            ]);
        }
        $data=$this->request->get();
        $id=$this->request->get('id');
        $validate=validate('Nav');
        if(!$validate->scene('sort1')->check($data)){
            return json([
                'code'=>config('code.fali'),
                'msg'=>$validate->getError()
            ]);
        }
        $result=Db::table('nav')->where('id',$id)->find();
        return $result;

 }
    public function update(){
            if(!$this->request->isPost()){
                return json([
                    'code'=>config('code.fali'),
                    'msg'=>'请求方式错误'
                ]);
            }
            $id=$this->request->post('id');
            $navname=$this->request->post('nameUpdate');
            $sort=$this->request->post('sortupdate');
            $url=$this->request->post('urlUpdate');
            $result=Db::table('nav')->where('id',$id)->update(['navname'=>$navname,'sort'=>$sort,'url'=>$url]);
            if($result){
                return  json([
                    'code'=>config('code.success'),
                    'msg'=>'修改成功'
                ]);
            }else{
                return  json([
                    'code'=>config('code.fali'),
                    'msg'=>'修改失败'
                ]);
            }


    }
    public function sort(){
        if (!$this->request->isPost()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>"请求方式错误"
            ]);
        }
        $id=$this->request->post('id');
        $sort=$this->request->post('sort');
        $result=Db::table('nav')->where('id',$id)->update(['sort'=>$sort]);

        try {
            if($result){
                return json([
                    'code'=>config('code.success'),
                    'msg'=>"修改成功"
                ]);
            }
        }catch (Exception $exception){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'修改失败'
            ]);
        };
    }
}