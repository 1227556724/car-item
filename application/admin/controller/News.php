<?php


namespace app\admin\controller;


use think\Db;
use think\Exception;

class News extends Base
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }
    public function index(){
        return $this->fetch();
    }
    public function addindex(){
        return $this->fetch();
    }
    public function add(){
        if(!$this->request->isPost()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求方式错误'
            ]);
        }
        $data=$this->request->post();
        $valide=validate('News');
        if(!$valide->scene('add')->check($data)){
            return json([
                'code'=>config('code.fali'),
                'msg'=>$valide->getError()
            ]);
        }

        try{
            $model=model('News');
            $reslut=$model->inserts($data);
            if($reslut){
                return json([
                    'code'=>config('code.success'),
                    'msg'=>'插入成功'
                ]);
            }else{
                return json([
                    'code'=>config('code.fali'),
                    'msg'=>'插入失败'
                ]);
            }
        }catch(Exception $exception){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'插入失败'
            ]);
        }
    }
    public function query(){
        if(!$this->request->isGet()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求方式错误',
            ]);
        }
        //        请求从前台发送回来的所有数据
        $parme=$this->request->get();
//        判断如果没有收到页数或者为空，那就给一个默认值
        if(!isset($parme['page'])||empty($parme['page'])){
            $page=1;
        }else{
            $page=$parme['page'];
        }
//        判断如果没有收到每页显示的条数，那就给一个默认值
        if(!isset($parme['limit'])||empty($parme['limit'])){
            $limit=config('paginte.list_rows');
        }else{
            $limit=$parme['limit'];
        }
//        创建一个空的数组，用来判断接收回来多余的数据
        $sdata=[];
//        判断如果名称存在并且不为空就根据这个数组设置搜索的条件
        if(isset($parme['title'])&&!empty($parme['title'])){
//            由于名称不能设置完全的相等，而like是一个模糊查询，大概有相同的名称就可以查询到
            $sdata['title']=['like','%'.$parme['title'].'%'];
        }
        $model=model('News');
        $result=$model->finds($sdata,$page,$limit);
        $count=$model->counts($sdata);
        try{
            if($result){
                return json([
                    'code'=>0,
                    'msg'=>'',
                    'data'=>$result,
                    'count'=>$count
                ]);
            }else{
                return json([
                    'code'=>2,
                    'msg'=>'数据请求失败'
                ]);
            }
        }catch (Exception $exception){
            return json([
                'code'=>2,
                'msg'=>'数据请求失败'
            ]);
        }
    }
    public function del(){
        if(!$this->request->isPost()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求方式错误'
            ]);
        }
        $data=$this->request->post();
        $validate=validate('News');
        if(!$validate->scene('del')->check($data)){
            return json([
                'code'=>config('code.fali'),
                'msg'=>$validate->getError()
            ]);
        }

        try{
            $model=model('News');
            $result=$model->dels($data);
            if($result){
                return json([
                    'code'=>config('code.success'),
                    'msg'=>'删除成功'
                ]);
            }else{
                return json([
                    'code'=>config('code.fali'),
                    'msg'=>'删除失败'
                ]);
            }
        }catch (Exception $exception){
            return json([
                'code'=>config('code.fail'),
                'msg'=>'删除失败'
            ]);
        }
    }
    public function edit(){
        if(!$this->request->isPost()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求方式错误'
            ]);
        }
        $id=$this->request->post();
        $model=model('News');
        $result=$model->edits($id);

        if ($result){
            return json([
                'code'=>config('code.success'),
                'msg'=>'',
                'data'=>$result
            ]);
        }else{
            return json([
                'code'=>config('code.fali'),
                'msg'=>'获取错误',
            ]);
        }
    }
    public function update(){
        if(!$this->request->isPost()){
            return json([
                'code'=>config('code.fali'),
                'msg'=>'请求方式错误'
            ]);
        }
        $data=$this->request->post();
        $id=$this->request->post('id');
        $content=$this->request->post('content');
        $title=$this->request->post('title');
//        $model=model('News');
//        $result=$model->updates($data);
        $result=Db::table('news')->where('id',$id)->update(['title'=>$title,'content'=>$content]);
        if($result){
            return json([
                'code'=>config('code.success'),
                'msg'=>'修改成功'
            ]);
        }else{
            return json([
                'code'=>config('code.fali'),
                'msg'=>'修改失败,请先修改内容'
            ]);
        }
    }
}